# ☕ Java Collections: List, Set e Map com Exemplos

Este repositório contém um exemplo prático de como utilizar **List**, **Set** e **Map** em Java. São estruturas fundamentais para qualquer desenvolvedor Java, ideais para armazenar e manipular coleções de dados de forma eficiente.

---

## 🔹 LIST

✔️ Permite elementos **duplicados**  
✔️ Mantém a **ordem de inserção**  
✔️ Acesso por **índice**

### 🧪 Exemplo com `ArrayList`
```java
List<String> funcionarios = new ArrayList<>();
funcionarios.add("João");
funcionarios.add("Maria");
funcionarios.add("João"); // permitido (duplicado)

System.out.println(funcionarios.get(0)); // João
System.out.println(funcionarios.get(1)); // Maria
System.out.println(funcionarios.get(2)); // João
🛠️ Métodos comuns:
add(elemento) – adiciona item

get(index) – retorna item da posição

remove(index ou elemento)

size() – tamanho da lista

contains(elemento) – verifica existência

📌 Dica: Para obter o primeiro e último elemento:

String primeiro = funcionarios.get(0);
String ultimo = funcionarios.get(funcionarios.size() - 1);

🔹 SET
❌ Não permite elementos duplicados
⚠️ Não garante ordenação (dependendo da implementação)

🧪 Exemplo com HashSet

Set<String> produtos = new HashSet<>();
produtos.add("Notebook");
produtos.add("Mouse");
produtos.add("Teclado");
produtos.add("Mouse"); // será ignorado

System.out.println(produtos); // Ordem pode variar
🛠️ Métodos comuns:
add(elemento)

remove(elemento)

contains(elemento)

size()

isEmpty()

📌 Implementações:

HashSet: mais rápido, sem ordem

LinkedHashSet: mantém ordem de inserção

TreeSet: ordena automaticamente

🔹 MAP
🔑 Armazena pares chave-valor
❌ Não permite chaves duplicadas
✔️ Valores podem se repetir

🧪 Exemplo com HashMap

Map<Integer, String> clientes = new HashMap<>();
clientes.put(1, "Carlos");
clientes.put(2, "Ana");
clientes.put(3, "Carlos"); // valores podem se repetir

System.out.println(clientes.get(1)); // Carlos
System.out.println(clientes.get(2)); // Ana
System.out.println(clientes.get(3)); // Carlos
🛠️ Métodos comuns:
put(chave, valor)

get(chave)

remove(chave)

containsKey(chave)

keySet() – retorna todas as chaves

values() – retorna todos os valores

📌 Implementações:

HashMap: mais rápido, sem ordem

LinkedHashMap: mantém ordem de inserção

TreeMap: ordena por chave

📌 Resumo Visual
Estrutura	Duplicados?	Ordenação?	Acesso Direto
List	✅ Sim	✅ Sim	✅ Sim (get(index))
Set	❌ Não	❌ Não (HashSet) / ✅ (TreeSet)	❌ Não
Map	❌ Chave não / ✅ Valor sim	❌ (HashMap) / ✅ (TreeMap)	✅ Por chave (get(key))

✅ Saída do Exemplo

João
Maria
João
[Mouse, Teclado, Notebook] // Ordem pode variar
{1=Carlos, 2=Ana, 3=Carlos}
Carlos
Ana
Carlos