# ☕ Java Collections: List, Set e Map com Exemplos

Este repositório apresenta exemplos práticos de como usar as interfaces **List**, **Set** e **Map** em Java.  
Essas estruturas são essenciais para armazenar, organizar e manipular dados de forma eficiente.

---

## 🔹 LIST

✅ Permite **elementos duplicados**  
✅ Mantém a **ordem de inserção**  
✅ Acesso por **índice**

### 📌 Exemplo com `ArrayList`:
```java
List<String> funcionarios = new ArrayList<>();
funcionarios.add("João");
funcionarios.add("Maria");
funcionarios.add("João"); // duplicado permitido

System.out.println(funcionarios.get(0)); // João
System.out.println(funcionarios.get(1)); // Maria
System.out.println(funcionarios.get(2)); // João
🛠️ Métodos úteis:
add(elemento)

get(index)

remove(elemento ou index)

size()

contains(elemento)

💡 Dica:
java
Copiar
Editar
String primeiro = funcionarios.get(0);
String ultimo = funcionarios.get(funcionarios.size() - 1);
🔹 SET
❌ Não permite elementos duplicados
⚠️ Não garante ordem (dependendo da implementação)

📌 Exemplo com HashSet:
java
Copiar
Editar
Set<String> produtos = new HashSet<>();
produtos.add("Notebook");
produtos.add("Mouse");
produtos.add("Teclado");
produtos.add("Mouse"); // duplicado será ignorado

System.out.println(produtos); // ordem não garantida
🛠️ Métodos úteis:
add(elemento)

remove(elemento)

contains(elemento)

size()

isEmpty()

📎 Implementações:
HashSet – rápido, sem ordem

LinkedHashSet – mantém ordem de inserção

TreeSet – ordena automaticamente

🔹 MAP
🔑 Armazena pares chave-valor
❌ Não permite chaves duplicadas
✅ Valores podem se repetir

📌 Exemplo com HashMap:
java
Copiar
Editar
Map<Integer, String> clientes = new HashMap<>();
clientes.put(1, "Carlos");
clientes.put(2, "Ana");
clientes.put(3, "Carlos"); // valor repetido, chave diferente

System.out.println(clientes.get(1)); // Carlos
System.out.println(clientes.get(2)); // Ana
System.out.println(clientes.get(3)); // Carlos
🛠️ Métodos úteis:
put(chave, valor)

get(chave)

remove(chave)

containsKey(chave)

keySet()

values()

📎 Implementações:
HashMap – rápido, sem ordem

LinkedHashMap – mantém ordem de inserção

TreeMap – ordenado por chave

📊 Resumo Rápido
Estrutura	Aceita Duplicados?	Ordenação	Acesso Direto
List	✅ Sim	✅ Sim	✅ get(index)
Set	❌ Não	❌/✅	❌ Não
Map	❌ (chaves)	❌/✅	✅ get(chave)

🖨️ Saída esperada do código:
arduino
Copiar
Editar
João
Maria
João
[Mouse, Teclado, Notebook]  // ordem pode variar
{1=Carlos, 2=Ana, 3=Carlos}
Carlos
Ana
Carlos
📚 Referências
Documentação Oficial – Java Collections

Baeldung – Java Collections

